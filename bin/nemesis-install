#!/bin/bash
#
# nemesis-install.sh
# (c) 2013 Sam caldwell.  All Rights Reserved.
#
set -e
export DEBUG=1
[ $DEBUG -eq 1 ] && set -x

export PATH=$PATH:/srv/nemesis/bin/
export BUILD_PATH=/srv/nemesis/src
export TIME_SERVER="0.pool.ntp.org"

[ "$(grep DISTRIB_ID /etc/lsb-release | awk -F \= '{print $2}')" != "Ubuntu" ] && {
	echo "This script will only work with Ubuntu."
	echo "It would probably work with Debian, but it hasn't been tested."
	exit 1
}

[ "$(whoami)" != "root" ] && echo "$0 must be run as root." && exit 1

ln -sf /srv/nemesis/etc/vimrc /root/.vimrc && \
ln -sf /srv/nemesis/etc/nemesis.profile /etc/profile.d/nemesis.sh && \
. /etc/profile && \
ln -sf /srv/nemesis/bin/delay /usr/bin/delay && \
echo "Updating the clock..." && \
time ntpdate $TIME_SERVER && \
echo "installing software packages" && {

	time apt-get install vim openssh-server openssh-client openssl \
						 mongodb nginx-full binutils cpp cpp-4.7 \
						 g++ g++-4.7 gcc gcc-4.7 fakeroot \
						 libgcc-4.7-dev make -y && \
	echo "Packages installed...configuring..."
	rm -f /etc/nginx/sites-enabled/* && \
	rm -rf /etc/nginx/sites-available && \
	ln -sf /srv/nemesis/etc/nginx/sites-available /etc/nginx/sites-available && \
	ln -sf /srv/nemesis/etc/nginx/sites-available/${SERVER_TYPE} /etc/nginx/sites-enabled/${SERVER_TYPE} && \
	rm -rf /etc/rsyslog* && \
	ln -sf /srv/nemesis/etc/rsyslog/rsyslog.conf /etc/rsyslog.conf && \
	service rsyslog restart && \
	for SERVER_TYPE in audit broker cipherstore keystore; do
		ln -sf /srv/nemesis/etc/init/${SERVER_TYPE} /etc/init/${SERVER_TYPE} && \
		ln -sf /srv/nemesis/etc/init.d/nemesis-${SERVER_TYPE} /etc/init.d/nemesis-${SERVER_TYPE} 
	done && \
	mkdir -p /var/run/nemesis/${SERVER_TYPE} && \
	mkdir -p /var/log/nemesis/{audit,broker,cipher,keys} && \
	echo "Base installation complete" || {
		echo "base_install() failed"
		return 1
	}
} && \
echo "installing node..." && {
	cd /srv/nemesis/src/ && \
	tar -xvzf node.tar.gz && \
	cd node && \
	make clean && \
	./configure && make && make install && \
	ln -sf /usr/local/bin/node /usr/bin/node && \
	echo "Node JS is installed." && \
	/usr/local/bin/node -v || {
		echo " "
		echo "+---------------------+"
		echo "|Something went wrong.|"
		echo "+---------------------+"
		echo " "
		exit 1
	}
	echo "done." 
}
[ "$(getYesNo 'Configure networking?')" != "Y" ] && {
	echo " "
	echo "You said 'No' (N/n)...terminating."
	echo " "
	exit 0
}
echo " "
[ "$(getYesNo 'Set a static IP address?')" != "Y" ] && {
		echo "Configuring for DHCP"
		create_default_config
		echo "restarting network"
		restart_networking
		exit 0
}
echo " " 
ADDRESS="$(getIP 'Enter IP Address')"
echo " "
NETMASK="$(getMask 'Enter Subnet Mask')"
echo " "
GATEWAY="$(getIP 'Enter Gateway')"
echo " "
DNS="$(getIP 'Enter DNS IP')"
echo " "

[ "$(getYesNo 'Are these settings correct?')" != "Y" ] && {
	echo " "
	echo "Not applying the changes"
	echo " "
}
echo "Setting the following parameters:"
echo "    proto:   static"
echo "    address: $ADDRESS"
echo "    netmask: $NETMASK"
echo "    gateway: $GATEWAY"
echo "    dns:     $DNS"
echo " "

cat > /etc/network/interfaces << EOF_CONFIG
#/etc/network/interfaces
#  mail@samcaldwell.net
#
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
#END OF /etc/network/interfaces#
EOF_CONFIG

sed -i -e 's/dhcp/static/' /etc/network/interfaces
echo "address $ADDRESS" >> /etc/network/interfaces
echo "netmask $NETMASK" >> /etc/network/interfaces
echo "gateway $GATEWAY" >> /etc/network/interfaces
echo "dns-nameservers $DNS" >> /etc/network/interfaces

echo "Restarting network..."
/etc/init.d/networking restart &> /dev/null
[ "$?" != "0" ] && echo "Network failed to restart" && exit 1
echo "...Network restarted"

